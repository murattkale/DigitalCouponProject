@model DynamicModel
@{
    Type t = Model.model.GetType();
    Model.controllerName = string.IsNullOrEmpty(Model.controllerName) ? t.Name : Model.controllerName;

    var formname = "frm_" + t.Name;

    var props = t.GetProperties().ToList();

    var baseType = new BaseModel().GetType().GetProperties().Where(o => o.Name != "ModDate" && o.Name != "CreaDate" && o.Name != "OrderNo").ToList();
    props = props.AsQueryable().Where(d => d.Name != "ModDate" && d.Name != "CreaDate"
    //&& !Helpers.GetPropertyAttributes(d).Keys.Any(oo => oo == "NotMapped")
    ).ToList();

    var IdValue = Model.model.GetPropValue("Id");
    var idval = IdValue.ToInt();

}

<script type="text/javascript">
    var TName = "@t.Name";
    var formname = "@formname";
    var IdValue = "@IdValue";
    var idval = toInt('@idval');
    var controllerName = "@Model.controllerName";
    var InsertMethodName = "@Model.InsertMethodName";
    var BackUrl = "@Model.BackUrl";
    var ScriptFunc = "@Model.ScriptFunc";
    var postModelRow = @Html.Raw(Json.Serialize(Model.model))
</script>

<div formdata="@Model.model.GetType().Name" class="container">
    <form name="@formname" id="frm_@t.Name">

        <div class="row float-right">
            <div class="col-md-12">
                @Html.Raw(idval < 1 ? "" : Model.removeBtn)
                @Html.Raw(Model.addBtn)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
            </div>
        </div>

        <div class="form-group row mt-20">
            @foreach (var prp in baseType)
            {
                var prpName = prp.Name;
                if (prp.PropertyType.Name != "DateTime")
                {
                    <input id="@prpName" name="@prpName" value="@Model.model.GetPropValue(prpName)" type="hidden">
                }
                else
                {
                    <input id="@prpName" name="@prpName" value="@Model.model.GetPropValue(prpName)?.ToDateTime().Value.ToShortDateString()" type="hidden">
                }
                props = props.AsQueryable().Where(d => d.Name != prpName).ToList();
            }

            @if (!string.IsNullOrEmpty(Model.nonProp))
            {
                Model.nonProp.Split(",").ToList().ForEach(o =>
                {
                    props = props.AsQueryable().Where(d => d.Name != o.Trim()).ToList();
                });


                @foreach (var prp in Model.nonProp.Split(","))
                {
                    if (!prp.Contains("Date"))
                    {
                        <input id="@prp" name="@prp" value="@Model.model.GetPropValue(prp)" type="hidden">
                    }
                    else
                    {
                        <input id="@prp" name="@prp" value="@Model.model.GetPropValue(prp)?.ToDateTime().Value.ToShortDateString()" type="hidden">
                    }
                }
            }

            @{
                var disabledList = Model.disabledProp?.Split(",").ToList();
                var hideClass = Model.hideClass?.Split(",").ToList();
                var orderbyProps = props.AsQueryable().OrderByDescending(oo => "" == "");
            }

            @if (!string.IsNullOrEmpty(Model.orderby))
                Model.orderby.Split(",").ToList().ForEach(o =>
                {
                    if (!string.IsNullOrEmpty(o))
                        props = orderbyProps.OrderByDescending(oo => oo.Name == o.Trim()).ThenBy(oo => oo.Name == o.Trim()).ToList();
                });


            @foreach (var prp in props)
            {
                var prpName = prp.Name;

                var contRow = props.FirstOrDefault(o => o.Name != prpName && (o.Name == (prpName.Replace("Name", "")) || o.Name == (prpName.Replace("EnumDesc", ""))));
                if (contRow != null && contRow.PropertyType.IsEnum == true)
                {
                    continue;
                }

                var dName = Helpers.GetPropertyAttributes(prp);
                if (dName.Count > 0 && dName.Any(o => o.Key == "NotMapped"))
                {
                    continue;
                }

                object value = null;
                switch (Type.GetTypeCode(prp.PropertyType))
                {
                    case TypeCode.Boolean:
                    case TypeCode.Char:
                    case TypeCode.SByte:
                    case TypeCode.Byte:
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.Int32:
                    case TypeCode.UInt32:
                    case TypeCode.Int64:
                    case TypeCode.UInt64:
                    case TypeCode.Single:
                    case TypeCode.Double:
                    case TypeCode.Decimal:
                    case TypeCode.DateTime:
                        {
                            break;
                        }
                    case TypeCode.String:
                    case TypeCode.Object:
                        {
                            value = Model.model.GetPropValue(prpName);
                            break;
                        }
                }


                //if (false)
                if (dName.Any(o => o.Value.ToStr() == "Location"))
                {
                    var Locations1 = value.ToStr().Split(',').Count() > 1 ? value.ToStr().Split(',')[0] : "41.029717";
                    var Locations2 = value.ToStr().Split(',').Count() > 1 ? value.ToStr().Split(',')[1] : "29.0056671";
                    <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false&key=AIzaSyA7SSIsUvRbEQ1oGFo77QZNV_BNpCIqYyU&callback=initMap"></script>

                    <script>
                        (function ($) {
                            var geocoder = new google.maps.Geocoder();
                            var map = null;
                            var mapElement = null;
                            var settings = null;
                            var kharkivCoordinates = {
                                latitude: @Html.Raw(Locations1),
                                longitude: @Html.Raw(Locations2),
                            };

                            var setKharkivLocation = function () {
                                setLocation(new google.maps.LatLng(kharkivCoordinates.latitude, kharkivCoordinates.longitude));
                            }


                            var setDefaultLocation = function (settings) {
                                if (settings.address !== undefined) {
                                    setLocationByAddress(settings.address);
                                } else {
                                    if (navigator.geolocation) {
                                        navigator.geolocation.getCurrentPosition(function (position) {
                                            setKharkivLocation();
                                        }, function () {
                                            setKharkivLocation();
                                        });
                                    } else {
                                        setKharkivLocation();
                                    }
                                }
                            };

                            var setLocationByAddress = function (address) {
                                var location = null;
                                geocoder.geocode({ 'address': address }, function (results, status) {
                                    if (status == google.maps.GeocoderStatus.OK) {
                                        setLocation(results[0].geometry.location);
                                    } else {
                                        setKharkivLocation();
                                    }
                                });
                            }


                            var setLocation = function (location) {
                                map.setCenter(location);
                                createActiveMarker(location);
                            }


                            var createActiveMarker = function (position) {
                                var marker = new google.maps.Marker({
                                    map: map,
                                    position: position,
                                    draggable: true
                                });
                                google.maps.event.addListener(marker, 'dragend', function (e) {
                                    sendNewPositionToServer(e.latLng);
                                });
                            }


                            var sendNewPositionToServer = function (LatLng) {
                                var postModel = {
                                    Location: btoa(LatLng.lat() + ',' + LatLng.lng()),
                                    Id: settings.additionalData.Id
                                };
                                if (settings.serverUrl !== undefined) {
                                    $.ajax({
                                        url: settings.serverUrl,
                                        type: (settings.requestType !== undefined) ? settings.requestType : 'POST',
                                        data: postModel,
                                        success: function (res) {
                                            $('#Location').val(res);
                                            console.log("Location:" + res);
                                        }
                                    });


                                }
                            };


                            var initMap = function (settings) {
                                mapElement = this[0];
                                map = new google.maps.Map(mapElement, settings);
                            };



                            var methods = {


                                init: function (options) {
                                    settings = $.extend({
                                        zoom: 12,
                                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                                        additionalData: {}
                                    }, options);
                                    initMap.call(this, settings);
                                    setDefaultLocation.call(this, settings);
                                },

                                setOption: function (option, value) {

                                }

                            };


                            $.fn.jqPinMyLocation = function (method) {
                                if (methods[method]) {
                                    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
                                } else if (typeof method === 'object' || !method) {
                                    return methods.init.apply(this, arguments);
                                } else {
                                    $.error('Method ' + method + ' does not exist on jQuery.jqPinMyLocation');
                                }
                            };

                        })(jQuery);

                    </script>

                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#map_canvas').jqPinMyLocation({
                                serverUrl: '/Partner/PartnerLocationUpdate',//Server url
                                requestType: 'POST', // Type of request that we will send to server
                                additionalData: {//Additional data that will be send to server after user drag the cursor
                                    Id: "@IdValue"
                                },
                                //address: 'Istanbul, Turkey'//You need to provide the default address where the map will be centered
                            });
                        });
                    </script>


                    <div class="container mb-10 mt-5">
                        <div class="row">
                            <div class="col-md-12">
                                <div id="map_canvas" style="width: 100%; height:400px"></div>
                            </div>
                            <br>
                            <div class="col-md-12">
                                @Html.Raw("Locations".Trans()) :  <input class="form-control" id="Location" name="Location" value="@Html.Raw(Locations1+"," + Locations2)" />
                            </div>
                        </div>
                    </div>

                    continue;

                }


                var DisplayName = "";
                if (dName.Count > 0 && dName.Any(o => o.Key == "DisplayName"))
                    DisplayName = dName.FirstOrDefault(o => o.Key == "DisplayName").Value.ToStr();
                else
                    DisplayName = prpName;

                DisplayName = DisplayName.Trans();

                var placeholder = "";
                placeholder = DisplayName;

                var Required = "";
                var strReq = "";
                if (dName.Count > 0 && dName.Any(o => o.Key == "Required"))
                {
                    Required = dName.FirstOrDefault(o => o.Key == "Required").Key.ToStr();
                    strReq = " <span style='color:red;' class='required'> * </span>";
                    DisplayName += strReq;
                }

                var pModelCustom = new whereCaseModel();
                var whereCaseCustom = Model.whereCaseCustom.ToStr().Split('=').Where(o => o != "");
                if (whereCaseCustom.Count() > 0)
                {
                    pModelCustom = new whereCaseModel
                    {
                        name = Model.whereCaseCustom.ToStr().Split('=')[0],
                        whereCase = Model.whereCaseCustom.ToStr().Split('=')[1]
                    };
                }
                else
                {
                    pModelCustom = new whereCaseModel
                    {
                        name = "",
                        whereCase = ""
                    };
                }

                var pModel = new whereCaseModel();
                var whereCase = Model.whereCase.ToStr().Split('=').Where(o => o != "");
                if (whereCase != null && whereCase.Count() > 0 && prpName == Model.whereCase.ToStr().Split('=')[0])
                {
                    pModel = new whereCaseModel
                    {
                        name = Model.whereCase.ToStr().Split('=')[0],
                        whereCase = Model.whereCase.ToStr().Split('=')[1]
                    };
                }
                else
                {
                    pModel = new whereCaseModel
                    {
                        name = "",
                        whereCase = ""
                    };
                }

                var disabledPropName = disabledList != null && disabledList.Any(o => o == prpName) ? "disabled='disabled'" : "";
                var hideClassPropName = hideClass != null && hideClass.Any(o => o == prpName) ? "d-none" : "";

                var SingleDocument = dName.FirstOrDefault(o => o.Key == "DataType");

                if (SingleDocument.Value != null && SingleDocument.Value.ToStr() == "SingleDocument")
                {
                    var imageLink = SessionRequest.config.ImageUrl + "fileupload/UserFiles/Folders/" + (value == null ? "/assets/media/users/blank.png" : value);
                    <style>
                        .containCustom {
                            background-size: cover !important;
                            background-repeat: no-repeat !important;
                        }
                    </style>

                    <div class="card card-custom gutter-b example example-compact col-md-3">
                        <div class="card-header">
                            <div class="card-title">
                                <h3 class="card-label">@Html.Raw(DisplayName)</h3>
                            </div>
                        </div>
                        <!--begin::Form-->
                        <div class="card-body">
                            <div class="row">
                                @* <style>
                        .imgBack {
                        background-image: url(@imageLink);
                        }
                        </style>*@

                                <div style="background-image: url(@imageLink);background-size: contain !important;" class="col-md-12 file_image_@prp.Name image-input image-input-outline imgBack">
                                    <div style="border: none !important;" class="image-input-wrapper" name="file_image_@prp.Name" id="file_image_@prp.Name"></div>
                                    <a href="/FileManagerData/FileManager?id=@idval&name=@prpName&cont=SingleDocument" class="mymodal btn-bg-success">
                                        <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change"
                                               data-toggle="tooltip" title="" data-original-title="@Html.Raw(DisplayName) Add/Update">
                                            <i class="fa fa-pen icon-sm text-muted"></i>
                                        </label>
                                    </a>
                                    <input disabled type="text" id="file_link_@prpName" name="file_link_@prpName" value="@value" class="d-none form-control  form-control-lg" />

                                    <span dataid="@idval" class="btnImageDelete_@prp.Name btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="remove" data-toggle="tooltip" title="" data-original-title="@Html.Raw(DisplayName) Delete">
                                        <i class="ki ki-bold-close icon-xs text-muted"></i>
                                    </span>
                                    <script type="text/javascript">
                                        $(function () {
                                            $('#@formname .btnImageDelete_' + "@prp.Name").click(function () {
                                                $('#@formname #file_link_@prp.Name').val('');
                                                $('#@formname .file_image_@prp.Name').removeClass('imgBack');
                                            });
                                        });
                                    </script>

                                </div>
                            </div>


                            <!--begin::Code-->
                            <!--end::Code-->
                        </div>
                    </div>


                    continue;
                }

                else if (prpName == "PartnerDocument" || prpName == "Gallery" || prpName == "Documents")
                {
                    <div class="card card-custom gutter-b example example-compact col-md-12">

                        <div class="subheader py-2 py-lg-6 subheader-transparent" id="kt_subheader">
                            <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
                                <!--begin::Info-->
                                <div class="d-flex align-items-center flex-wrap mr-2">
                                    <!--begin::Page Title-->
                                    <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">@Html.Raw(prpName=="PartnerDocument" ? "Images".Trans():prpName)</h5>
                                    <!--end::Page Title-->
                                    <!--begin::Action-->
                                    <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-4 bg-gray-200"></div>

                                    <style>
                                        .k-clear-selected, .k-upload-selected {
                                            display: none !important;
                                        }
                                    </style>
                                    <input accept=".jpg,.png,.ico,.svg,.jpeg,.gif" multiple type="file" id="files" name="files" />
                                    <script>
                                        $(function () {
                                            $('#files').kendoUpload({
                                                validation: {
                                                    maxFileSize: @Html.Raw(SessionRequest.config.MaxImageSize * 1024)
                                                                                                                                                                                                                                                        },
                                                async: {
                                                    saveUrl: "/FileManagerData/OnPostSave",
                                                    autoUpload: false,
                                                    allowmultiple: true
                                                },
                                                upload: function (e) {
                                                    e.data = {
                                                        Id: $('#Id').val(),
                                                        type: '@prpName'
                                                    };
                                                },
                                                success: function (e) {
                                                    debugger;
                                                    $('#Id').val(toInt(e.response));
                                                    refreshSave();
                                                },
                                                error: function (e) {
                                                    console.log(e);
                                                },
                                                onselect: function (e) {
                                                    var files = e.files
                                                    var acceptedFiles = [".jpg", ".jpeg", ".png", ".gif", ".svg"]
                                                    var isAcceptedImageFormat = ($.inArray(files[0].extension, acceptedFiles)) != -1

                                                    if (!isAcceptedImageFormat) {
                                                        e.preventDefault();
                                                        alert("Image must be jpeg, png, svg, gif or gif");
                                                    }
                                                }
                                            });

                                        });


                                    </script>

                                    <label style="color:red;" class="">@Html.Raw(prpName == "PartnerDocument" ?"500x320":"500x320" ) Px, Max Image Size : @SessionRequest.config.MaxImageSize KB</label>
                                    <!--end::Action-->
                                </div>
                                <!--end::Info-->
                            </div>
                        </div>

                        <div class="card-body">
                            <div class="form-group row">
                                <div class="col-md-12">

                                    <table id="dt_@prpName" class="table table-bordered table-hover table-checkable" style="margin-top: 13px !important">
                                        <thead>
                                            <tr>
                                            </tr>
                                        </thead>
                                    </table>

                                    <script>


                                        $(function () {


                                            getGrid();
                                            function getGrid() {
                                                var columns = [];

                                                columns.push({ "data": "OrderNo", text: "ORDER" });
                                                columns.push({ "data": "imageTag", text: "IMAGE" });
                                                columns.push({ "data": "Name", text: "NAME" });
                                                columns.push({ "data": "CreaDate", text: "CREATE DATE" });

                                                columns.push({ "data": "Detail", text: "DETAIL" });

                                                $('#dt_@prpName' + ' thead tr').html("");

                                                $.each(columns, function (i, item) {
                                                    $('#dt_@prpName' + ' thead tr').append('<td> ' + item.text + '</td > ');
                                                });

                                                var table = $('#dt_@prpName').DataTable({
                                                    "ajax": {
                                                        "url": '/' + TName + '/Get' + "@prpName",
                                                        "type": "POST",
                                                        "datatype": "json",
                                                        "data": function (searchModel) {

                                                            searchModel.selectid = "@idval";
                                                            $('#dt_@prpName').LoadingOverlay("show");
                                                        },
                                                        "dataSrc": function (json) {
                                                            return_data = new Array();
                                                            var data = json.data;

                                                            $.each(data, function (i, row) {
                                                                var detail = "<input  dataid='" + row.Id + "' type='button' value='Remove' class='btnDelete btn btn-danger btn-shadow-hover font-weight-bold mr-2' />";

                                                                var imageTag = '';

                                                                imageTag += '  <div style="background-image: url(' + ImageUrlFull + row.Link + ')" class="image-input image-input-outline"> ';
                                                                imageTag += '     <a data-fancybox="gallery" href="' + ImageUrlFull + row.Link + '">                                                      ';
                                                                imageTag += '         <img style="display:none;" width="0" src="' + ImageUrlFull + row.Link + '">                                   ';
                                                                imageTag += '         <div class="containCustom image-input-wrapper"></div>                                                           ';
                                                                imageTag += '     </a>                                                                                                                ';
                                                                imageTag += ' </div>                                                                                                                  ';


                                                                return_data.push({
                                                                    'OrderNo': row.OrderNo,
                                                                    'imageTag': imageTag,
                                                                    'Name': row.Name,
                                                                    'CreaDate': row.CreaDate,

                                                                    'Detail': detail,
                                                                });

                                                            });
                                                            $('#dt_@prpName').LoadingOverlay("hide");
                                                            return return_data;
                                                        }
                                                    },
                                                    "fnDrawCallback": function (settings, json) {
                                                        $('#dt_@prpName').LoadingOverlay("hide");

                                                        $('.dt-buttons').css('float', 'right');
                                                        $('.dt-buttons').css('margin-left', '20px');
                                                        $('.dt-buttons').css('margin-top', '16px');

                                                        $("#dt_@prpName" + " .btnDelete").click(function () {
                                                            var dataid = $(this).attr("dataid");
                                                            var dataname = $(this).attr("dataname");
                                                            alerts("Do you want to delete?", "yesno", function (result) {
                                                                if (result == true) {
                                                                    $.LoadingOverlay("show");
                                                                    $.ajx("/" + TName + "/DeleteImage",
                                                                        { id: dataid }, function (resultData) {
                                                                            getGrid();

                                                                            $.LoadingOverlay("hide");
                                                                        });
                                                                }
                                                            });
                                                        });


                                                    },
                                                    "destroy": true,
                                                    "caseInsensitive": true,

                                                    "pageLength": 15,
                                                    "DisplayLength": 5,
                                                    "lengthMenu": [[15, 25, 100, 1000, 2500, 5000], [15, 25, 100, 1000, 2500, 5000]],
                                                    "lengthChange": true,
                                                    "processing": true,
                                                    "columns": columns,
                                                    "order": [],
                                                    rowReorder: true,
                                                    columnDefs: [
                                                        { orderable: false, className: 'reorder', targets: 0, order: false },
                                                        { orderable: true, targets: '_all' }
                                                    ],
                                                });
                                                table.on('.row-reorder.dt', function (dragEvent, diff, nodes) {
                                                    var myArray = [];
                                                    for (var i = 0, ien = diff.length; i < ien; i++) {
                                                        var rowData = table.row(diff[i].node).data(); myArray.push({ id: rowData.Id, OrderNo: diff[i].newPosition, dataid: selecttype_Spec });
                                                    }
                                                    $.ajx('/' + TName + '/UpdateOrder', { postModel: myArray }, function (resultData) { table.ajax.reload(); $(table).LoadingOverlay("hide"); });
                                                });

                                            }
                                        });
                                    </script>

                                </div>
                            </div>
                        </div>
                    </div>

                    continue;
                }

                else if (prpName == "LangText")
                {
                    foreach (var lang_area in SessionRequest.Languages)
                    {
                        var gg = new List<LangText>();

                        var ff = value as dynamic;
                        var langtxt = new LangText();
                        foreach (var item in ff)
                        {
                            var ids = item as LangText;
                            if (ids.LangId == lang_area.Id)
                            {
                                langtxt = item;
                                break;
                            }
                        }

                        <div class="col-md-12">
                        </div>
                        <div class="@Model.colClass @hideClassPropName">
                            <div class="form-group">
                                <label>@Html.Raw("Name " + " " +  lang_area.Name)</label>
                                <input class="LangText form-control  form-control-lg"
                                       id="@Html.Raw("lang_Name_" + lang_area.Id)"
                                       name="@Html.Raw("lang_Name_" + lang_area.Id)"
                                       placeholder="@Html.Raw("Description " + " " +  lang_area.Name)"
                                       value="@Html.Raw(langtxt?.TextValue)"
                                       dataid="@Html.Raw(langtxt?.Id)"
                                       data="@Html.Raw(langtxt?.Id)"
                                       type="text">
                            </div>
                        </div>


                        <div class="@Model.colClass @hideClassPropName">
                            <div class="form-group">
                                <label>@Html.Raw("Description " + " " +  lang_area.Name)</label>

                                @(Html.Kendo().Editor()
                                    .Name("lang_Desc_" + lang_area.Id)
                                    .Resizable()
                                    .Encoded(false)
                                    .PasteCleanup(p => p.All(true))
                                    .HtmlAttributes(new { dataid = langtxt?.Id, style = "width: 100%; height:200px", aria_label = "editor" })
                                    .Tools(tools => tools
                                    .Clear()
                                    .Bold()
                                    .Italic()
                                    .Strikethrough()
                                    .Underline()
                                    .JustifyLeft()
                                    .JustifyCenter()
                                    .JustifyRight()
                                    .InsertUnorderedList()
                                    .InsertOrderedList()
                                    .Outdent()
                                    .Indent()
                                    .CreateLink()
                                    .Unlink()
                                    .InsertImage()
                                    .TableEditing()
                                    .FontName()
                                    .FontSize()
                                    .FontColor()
                                    .BackColor()
                                    .JustifyFull()
                                    .Formatting()
                                    .ViewHtml()
                                    .SubScript()
                                    .SuperScript()
                                    .Print()
                                    .FormatPainter()
                                    )
                                    .Value(langtxt?.TextDesc))

                            </div>
                        </div>


                    }

                }


                switch (Type.GetTypeCode(prp.PropertyType))
                {
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.UInt32:
                    case TypeCode.Int64:
                    case TypeCode.UInt64:
                    case TypeCode.Object:
                        {
                            if (IdValue.ToInt() > 0 && (prp.PropertyType.Name == "ICollection`1" || prp.PropertyType.FullName.Contains("Entity")))
                            {

                            }
                            else if (IdValue.ToInt() > 0 && (prp.PropertyType.Name == "Documents" || prp.PropertyType.Name == "Gallery"))
                            {

                            }
                            else if (prp.PropertyType.ToStr().Contains("System.DateTime"))
                            {
                                <div class="@Model.colClass @hideClassPropName">
                                    <div class="row form-group">
                                        <div class="@Model.labelClass">
                                            <label class="control-label" for="@prpName">@Html.Raw(DisplayName)</label>
                                        </div>
                                        <div class="input-group-append input-group date @Model.inputClass">
                                            <input @disabledPropName @Required
                                                   placeholder="@(placeholder + " " + "Select".Trans())"
                                                   autocomplete="off"
                                                   id="@prpName"
                                                   name="@prpName"
                                                   value="@(value == null ? " " : value?.ToDateTime().Value.ToShortDateString())"
                                                   class="form-control  form-control-lg"
                                                   type="datetime">

                                            <span class="input-group-text"><i class="la la-calendar"></i></span>
                                        </div>
                                    </div>
                                </div>


                                <script type="text/javascript">
                                    $(function () {
                                        $("#@formname #@prpName").datepicker({
                                            format: "dd.mm.yyyy",
                                            language: "en", todayBtn: "linked", clearBtn: !0, todayHighlight: !0
                                        });
                                    });
                                </script>

                            }
                            else
                            {
                                var relation = props.FirstOrDefault(o => prpName.Substring(prpName.Length - 2, 2) == "Id" && o.Name == prpName.Replace("Id", ""));
                                if (relation != null || prpName.Substring(prpName.Length - 2, 2) == "Id")
                                {
                                    var valueRow = Model.model.GetPropValue(prpName);


                                    var methodName = prpName.Replace("Id", "");
                                    if (relation != null)
                                        methodName = relation.PropertyType.Name;

                                    <div class="@Model.colClass @hideClassPropName">
                                        <div class="form-group">
                                            <label>@Html.Raw(DisplayName)</label>
                                            <select @disabledPropName @Required id="dp_@prpName" name="dp_@prpName" class="form-control  form-control-lg"></select>
                                        </div>
                                    </div>



                                    <script type="text/javascript">
                                        $(function () {
                                            $("#@formname #dp_@prpName").addOptionAjax("/@methodName/GetSelect", { '@Html.Raw(pModelCustom.name)': '@Html.Raw(pModelCustom.whereCase)' }, "value", "text", null, null, "@Html.Raw(valueRow.ToStr()==null || valueRow.ToStr()=="0" ? pModelCustom.whereCase : valueRow)", "", "@Html.Raw(placeholder) " + LangSelect);
                                        });
                                    </script>


                                }
                                else
                                {
                                    if (prp.PropertyType.GenericTypeArguments.Any(o => o.Name == "Boolean"))
                                    {
                                        @*var boolCount = 12 / props.Count(o => o.PropertyType.GenericTypeArguments.Any(o => o.Name == "Boolean"));*@
                                        <div class="form-group row">
                                            <div class="@hideClassPropName col-md-12">
                                                <label style="margin-bottom: 0 !important;" class="col-md-12">@Html.Raw(DisplayName)</label>
                                                <div class="col-3">
                                                    <span class="switch">
                                                        <label>
                                                            <input @(value.ToBoolean() == true ? " checked='checked' " : " ") type="checkbox" @Required id="@prpName" name="@prpName">
                                                            <span></span>
                                                        </label>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>

                                    }
                                    if (prp.PropertyType.GenericTypeArguments.Any(o => o.Name == "Int32"))
                                    {
                                        <div class="@Model.colClass @hideClassPropName">
                                            <div class="form-group">
                                                <label>@Html.Raw(DisplayName)</label>
                                                <input @disabledPropName @Required id="@prpName" name="@prpName" placeholder="@Html.Raw(placeholder)" value="@value" class="form-control  form-control-lg" type="number">
                                            </div>
                                        </div>
                                    }

                                }

                            }
                            break;
                        }
                    case TypeCode.Single:
                    case TypeCode.Double:
                    case TypeCode.Decimal:
                        {
                            var valueRow = Model.model.GetPropValue(prpName);
                            <div class="@Model.colClass @hideClassPropName">
                                <div class="form-group">
                                    <label>@Html.Raw(DisplayName)</label>
                                    <input @disabledPropName @Required id="@prpName" name="@prpName" placeholder="@Html.Raw(placeholder)" value="@valueRow" class="form-control  form-control-lg" type="text">
                                </div>
                            </div>
                            break;
                        }
                    case TypeCode.Boolean:
                        {
                            //var boolCount = 12 /
                            //    (props.Count(o => o.PropertyType.GenericTypeArguments.Any(o => o.Name == "Boolean")) <=0  ?
                            //    props.Count(o => o.PropertyType.Name == "Boolean")
                            //    : 1) ;
                            <div class="form-group row">
                                <div class="@hideClassPropName col-md-12">
                                    <label style="margin-bottom: 0 !important;" class="col-md-12">@Html.Raw(DisplayName)</label>
                                    <div class="col-3">
                                        <span class="switch">
                                            <label>
                                                <input @(value.ToBoolean() == true ? " checked='checked' " : " ") type="checkbox" @Required id="@prpName" name="@prpName">
                                                <span></span>
                                            </label>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                        break;
                    case TypeCode.Int32:
                        {
                            if (dName.Count > 0 && dName.Any(o => o.Key == "DataType") && dName.FirstOrDefault(o => o.Key == "DataType").Value.ToStr() == "number")
                            {
                                <div class="@Model.colClass @hideClassPropName">
                                    <div class="form-group">
                                        <label>@Html.Raw(DisplayName)</label>
                                        <input @disabledPropName @Required id="@prpName" name="@prpName" placeholder="@Html.Raw(placeholder)" value="@value" class="form-control  form-control-lg" type="number">
                                    </div>
                                </div>
                            }
                            else
                            {

                                if (prp.PropertyType.IsEnum)
                                {
                                    var enumList = Model.model.GetPropValue(prpName + "List") as List<EnumModel>;
                                    var valueRow = Model.model.GetPropValue(prpName);
                                    <div class="@Model.colClass @hideClassPropName">
                                        <div class="form-group">
                                            <label>@Html.Raw(DisplayName)</label>
                                            <select @disabledPropName @Required id="dp_@prpName" name="dp_@prpName" class="form-control  form-control-lg">
                                                @if (enumList != null)
                                                {
                                                    foreach (var item in enumList)
                                                    {
                                                        if (item.name.ToStr() == valueRow.ToStr())
                                                        {
                                                            <option selected value="@item.value">@item.text</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@item.value">@item.text</option>
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>


                                }
                                else
                                {
                                    var relation = props.FirstOrDefault(o => prpName.Substring(prpName.Length - 2, 2) == "Id" && o.Name == prpName.Replace("Id", ""));
                                    if (relation != null || prpName.Substring(prpName.Length - 2, 2) == "Id")
                                    {
                                        var valueRow = Model.model.GetPropValue(prpName);

                                        var methodName = prpName.Replace("Id", "");
                                        if (relation != null)
                                            methodName = relation.PropertyType.Name;

                                        <div class="@Model.colClass @hideClassPropName">
                                            <div class="form-group">
                                                <label>@Html.Raw(DisplayName)</label>
                                                <select @disabledPropName @Required id="dp_@prpName" name="dp_@prpName" class="form-control  form-control-lg">
                                                </select>
                                            </div>
                                        </div>

                                        <script type="text/javascript">
                                            $(function () {
                                                $("#@formname #dp_@prpName").addOptionAjax("/@methodName/GetSelect", { '@Html.Raw(pModelCustom.name)': '@Html.Raw(pModelCustom.whereCase)' }, "value", "text", null, null, "@Html.Raw(valueRow.ToStr()==null || valueRow.ToStr()=="0" ? pModelCustom.whereCase : valueRow)", "", "@Html.Raw(placeholder) " + LangSelect);
                                            });
                                        </script>

                                    }
                                    else
                                    {
                                        if (prp.PropertyType.GenericTypeArguments.Any(o => o.Name == "Boolean"))
                                        {
                                            <div class="form-group row">
                                                <div class="@hideClassPropName col-md-12">
                                                    <label style="margin-bottom: 0 !important;" class="col-md-12">@Html.Raw(DisplayName)</label>
                                                    <div class="col-3">
                                                        <span class="switch">
                                                            <label>
                                                                <input @disabledPropName @Required @(value.ToBoolean() == true ? " checked='checked' " : " ") type="checkbox" id="@prpName" name="@prpName">
                                                                <span></span>
                                                            </label>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        if (prp.PropertyType.GenericTypeArguments.Any(o => o.Name == "Int32"))
                                        {
                                            <div class="@Model.colClass @hideClassPropName">
                                                <div class="form-group">
                                                    <label>@Html.Raw(DisplayName)</label>
                                                    <input @disabledPropName @Required id="@prpName" name="@prpName" placeholder="@Html.Raw(placeholder)" value="@value" class="form-control  form-control-lg" type="number">
                                                </div>
                                            </div>
                                        }
                                    }
                                }

                            }

                            break;
                        }
                    case TypeCode.DateTime:
                        {
                            <div class="@Model.colClass @hideClassPropName">
                                <div class="row form-group">
                                    <div class="@Model.labelClass">
                                        <label class="control-label" for="@prpName">@Html.Raw(DisplayName)</label>
                                    </div>
                                    <div class="input-group-append input-group date @Model.inputClass">
                                        <input @disabledPropName @Required
                                               placeholder="@(placeholder + " " + "Select".Trans())"
                                               autocomplete="off"
                                               id="@prpName"
                                               name="@prpName"
                                               value="@(value == null ? " " : value?.ToDateTime().Value.ToShortDateString())"
                                               class="form-control  form-control-lg"
                                               type="datetime">

                                        <span class="input-group-text"><i class="la la-calendar"></i></span>
                                    </div>
                                </div>
                            </div>

                            <script type="text/javascript">
                                $(function () {
                                    $("#@formname #@prpName").datepicker({
                                        format: "dd.mm.yyyy",
                                        language: "en", todayBtn: "linked", clearBtn: !0, todayHighlight: !0
                                    });
                                });
                            </script>

                            break;
                        }
                    case TypeCode.String:
                        {
                            var textName = "";
                            if (dName.Count > 0 && dName.Any(o => o.Key == "DataType"))
                                textName = dName.FirstOrDefault(o => o.Key == "DataType").Value.ToStr();

                            if (textName != "")
                            {
                                if (textName == "text")
                                {
                                    <style>
                                        .hlError {
                                            background-color: #fea;
                                            color: #f33;
                                        }

                                        .hlOK {
                                            background-color: #aef;
                                            color: #060;
                                        }

                                        .inlineCode {
                                            font: bold 12px monospace;
                                        }
                                    </style>
                                    <div class="form-group">
                                        <label>@Html.Raw(DisplayName)</label>
                                        @(Html.Kendo().Editor()
                                            .Name(prpName)
                                            .Resizable()
                                            .Encoded(false)
                                            .PasteCleanup(p => p.All(true))
                                            .HtmlAttributes(new { style = "width: 100%; height:200px", aria_label = "editor" })
                                            .Tools(tools => tools
                                            .Clear()
                                            .Bold()
                                            .Italic()
                                            .Strikethrough()
                                            .Underline()
                                            .JustifyLeft()
                                            .JustifyCenter()
                                            .JustifyRight()
                                            .InsertUnorderedList()
                                            .InsertOrderedList()
                                            .Outdent()
                                            .Indent()
                                            .CreateLink()
                                            .Unlink()
                                            .InsertImage()
                                            .TableEditing()
                                            .FontName()
                                            .FontSize()
                                            .FontColor()
                                            .BackColor()
                                            .JustifyFull()
                                            .Formatting()
                                            .ViewHtml()
                                            .SubScript()
                                            .SuperScript()
                                            .Print()
                                            .FormatPainter()

                                            )
                                            .Value(value.ToStr())
                                            @*@(Html.Kendo().Editor().Encoded(false)
                .Name(prpName)
                .HtmlAttributes(new { style = "width: 100%; height:200px", aria_label = "editor" })
                .Tools(tools => tools
                .Clear()
                .Bold().Italic().Underline()
                .JustifyLeft().JustifyCenter().JustifyRight()
                .InsertUnorderedList().InsertOrderedList()
                .Outdent().Indent()
                .CreateLink().Unlink()
                .InsertImage()
                .TableEditing()
                .FontName()
                .FontSize()
                .FontColor().BackColor()
                )
                .ImageBrowser(imageBrowser =>
                {
                imageBrowser.Image("~/fileupload/UserFiles/Folders/{0}");
                imageBrowser.Read("Read", "FileManagerData");
                imageBrowser.Create("Create", "FileManagerData");
                imageBrowser.Destroy("Destroy", "FileManagerData");
                imageBrowser.Upload("Upload", "FileManagerData");
                //imageBrowser.Thumbnail("Thumbnail", "FileManagerData");
                }
                )
                .Value(value.ToStr())*@
                                            )

                                    </div>
                                }
                                else if (textName == "textarea")
                                {
                                    <div class="col-md-12 form-group">
                                        <label>@Html.Raw(DisplayName)</label>
                                        <textarea id="@prpName" name="@prpName" class="form-control">@value.ToStr()</textarea>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="@Model.colClass @hideClassPropName">
                                    <div class="form-group">
                                        <label>@Html.Raw(DisplayName)</label>
                                        <input class="form-control  form-control-lg"
                                        @disabledPropName @Required
                                               id="@prpName"
                                               name="@prpName"
                                               placeholder="@Html.Raw(placeholder)"
                                               value="@System.Uri.UnescapeDataString(value.ToStr())"
                                               type="@Html.Raw((prpName == "Pass" || prpName == "Password" || prpName == "Sifre" ? "password" : "text"))">
                                    </div>
                                </div>

                            }
                            break;
                        }
                    default:
                        {

                            break;
                        }
                }


            }

        </div>
    </form>
</div>
<script>
    function refreshSave() {
        debugger;
        IdLink = $('#Id').val();
        if (BackUrl != null && BackUrl != "") {
            $.LoadingOverlay("hide");

            if (BackUrl == '#') {

                CloseModal();

                return;
            }
            else if (BackUrl.indexOf('$alert=') != -1) {
                alerts(BackUrl.replace('$alert=', ''));

                return;
            }
            else if (BackUrl == '#reload') {
                location.reload();

                return;
            }
            else {
                location.href = BackUrl;
                return;

            }
        }

        if (ScriptFunc != "" && ScriptFunc != null) {
    @Html.Raw(Model.ScriptFunc)
                location.href = "/" + controllerName + '/InsertOrUpdatePage?id=' + IdLink;
        }
        else {
            var selectid = getQuery('selectid');
            var selecttype = getQuery('selecttype');
            var selectname = getQuery('selectname');
            var descname = getQuery('descname');

            alerts('Success', 'ok', function (al) {
                location.href = "/" + controllerName + '/InsertOrUpdatePage?id=' + IdLink;
            });
        }

        $.LoadingOverlay("hide");
    }


    function getQuery(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    $(function () {

        var cIntInterval = setInterval(function () {
            clearInterval(cIntInterval);
            ayarlar();
        }, 1500);

        try {
            $("#@formname #Name").ceo({ target: "#Link" });
        } catch (e) { }
        try {
            $("#@formname #Name").ceo({ target: "#MetaKeywords" });
        } catch (e) { }
        try {
            $("#@formname #Name").dup({ target: "#MetaDescription" });
        } catch (e) { }

        $("#@formname .btnDelete").click(function () {
            var dataid = $(this).attr("dataid");
            alerts("Delete record?", "yesno", function (result) {
                if (result == true) {
                    $.LoadingOverlay("show");

                    $.post('/' + TName + '/Delete', { id: dataid }).fail(function (err, exception) { console.error(err.responseText); })
                        .done(function (resultData) {

                            if (resultData.RType == 1) {
                                var selectid = getQuery('selectid');
                                var selecttype = getQuery('selecttype');
                                var selectname = getQuery('selectname');
                                var descname = getQuery('descname');



                                location.href = "/" + controllerName + '/Index?' +
                                    (selectid > 0 ? '&selectid=' + selectid : '')
                                    + (selecttype > 0 ? '&selecttype=' + selecttype : '')
                                    + (selectname != null ? '&selectname=' + selectname : '')
                                    + (descname != null ? '&descname=' + descname : '');

                            }
                            else {
                                alerts(resultData.MessageList);
                            }

                            $.LoadingOverlay("hide");
                        });



                }
            });
        });


        $("#" + formname).submit(function (e) {
            e.preventDefault();
            var postModel = $.fn.toForm("#" + formname);
            postModel.LangText = [];
            if ($('.LangText').hasClass('LangText')) {
                $.each(LangListArray, function (i, item) {
                    var modelRow = {
                        Id: $('#lang_Name_' + item.Id).attr('dataid'),
                        LangId: item.Id,
                        PartnerId: (controllerName == 'Partner' ? idval : null),
                        CouponId: (controllerName == 'Coupon' ? idval : null),
                        MemberShipId: (controllerName == 'MemberShip' ? idval : null),
                        BusinessTypeId: (controllerName == 'BusinessType' ? idval : null),
                        TextValue: $('#lang_Name_' + item.Id).val() ?? '',
                        TextDesc: $('#lang_Desc_' + item.Id).val() ?? ''
                    };
                    postModel.LangText.push(modelRow);
                });
            }
            $.LoadingOverlay("show");
            $.ajx("/" + controllerName + "/" + InsertMethodName,
                { postModel: postModel }, function (resultData) {
                    if (resultData.RType == 1) {
                        $('#Id').val(toInt(resultData.ResultRow.Id));
                        debugger;
                        var totalFiles = $('[name="' + 'files' + '"]')[0]?.files;
                        if (totalFiles != undefined && totalFiles.length > 0) {
                            $(".k-upload-selected").click();
                            return;
                        }
                        else {
                            refreshSave();
                        }

                    }
                    else {
                        console.log(resultData)
                        alerts(resultData.Message);
                    }

                }, function (err) { console.log(err) });
        });




    });
</script>


